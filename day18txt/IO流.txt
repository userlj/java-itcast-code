
IO流:用于处理设备上的数据。	
	设备：硬盘，内存，键盘录入。

IO有具体的分类：
	1，根据处理的数据类型不同：字节流和字符流。
	2，根据流向不同：输入流和输出流。
	
	字符流的由来：
		因为文件编码的不同，而有了对字符进行高效操作的字符流对象。
		原理：其实就是基于字节流读取字节时，去查了指定的码表。

	字节流和字符流的区别：
		1，字节流读取的时候，读到一个字节就返回一个字节。
		   字符流使用了字节流读到一个或多个字节(中文对应的字节数是两个，在UTF-8码表中是3个字节)时，
		   先去查指定的编码表，将查到的字符返回。
		2，字节流可以处理所有类型数据，如图片，mp3，avi。
		   而字符流只能处理字符数据。

	结论：只要是处理纯文本数据，就要优先考虑使用字符流。除此之外都用字节流。


--------------------

IO的体系。所具备的基本功能就有两个：读 和 写。
	1，字节流
		InputStream（读）,OutputStream（写）。
	2，字符流：
		Reader（读），Writer（写）。


基本的读写操作方式：
	因为数据通常都以文件形式存在。

	所以就要找到IO体系中可以用于操作文件的流对象。
	通过名称可以更容易获取该对象。
	因为IO体系中的子类名后缀都是父类名称。而前缀都是体现子类功能的名字。

	Reader
		|--InputStreamReader
			|--FileReader:专门用于处理文件的字符读取流对象。
	Writer
		|--OutputStreamWriter
			|--FileWriter:专门用于处理文件的字符写入流对象。

	
	Reader中的常见的方法：
		1，int read()：读取一个字符。返回的是读到的那个字符。如果读到流的末尾，返回-1.
		2，int read(char[])：将读到的字符存入指定的数组中，返回的是读到的字符个数，
				也就是往数组里装的元素的个数。如果读到流的末尾，返回-1.
		3，close():读取字符其实用的是window系统的功能，就希望使用完毕后，进行资源的释放。
	
	Writer中的常见的方法：
		1，write(ch): 将一个字符写入到流中。
		2，write(char[]): 将一个字符数组写入到流中。
		3，write(String): 将一个字符串写入到流中。
		4，flush():刷新流，将流中的数据刷新到目的地中，流还存在。
		5，close():关闭资源：先关闭前会先调用flush，刷新流中的数据去目的地。然流关闭。

	
	FileWriter:
		该类没有特有的方法。只有自己的构造函数。
		该类特点在于，
		1，用于处理文本文件。
		2，该类中有默认的编码表，
		3，该类中有临时缓冲。
		
		构造函数：在写入流对象初始化时，必须要有一个存储数据的目的地。
		FileWriter(String filename):
		该构造函数做了什么事情呢？
		1，调用系统资源。
		2，在指定位置，创建一个文件。
			注意：如果该文件已存在，将会被覆盖。
		FileWriter(String filename,boolean append):
			该构造函数：当传入的boolean类型值为true时，会在指定文件末尾处进行数据的续写。

	FileReader：
		1，用于读取文本文件的流对象。
		2，用于关联文件文件。

		构造函数：在读取流对象初始化的时候，必须要指定一个被读取的文件。
				如果该文件不存在会发生FileNotFoundException.
		FileReader(String filename);

	
------------------------------------
	
	1,将文本数据存储到一个文件中。
		
	class Demo
	{
		public static void main(String[] args)throws IOException
		{
			FileWriter fw = new FileWrier("demo.txt");

			fw.write("abcdec");

			fw.flush();
			fw.write("kkkk");

			fw.close();
		}
	}

	对于读取或者写入流对象的构造函数，以及读写方法，还有刷新关闭功能都会抛出IOException或其子类。

	所以都要进行处理。或者throws抛出，或者try catch处理。
	
	完整的异常处理方式。
	class Demo
	{
		public static void main(String[] args)throws IOException
		{
			FileWriter fw = null;
			try
			{
				fw = new FileWrier("z:\\demo.txt");
				fw.write("abcdec");

				fw.flush();
				fw.write("kkkk");


			}
			catch(IOException e)
			{
				System.out.println(e.toString());
			}
			finally
			{
				if(fw!=null)
					try 
					{
						fw.close();	
					}
					catch(IOException e)
					{
						System.out.println("close:"+e.toString());
					}
				
			}

			
		}
	}
		
	另一个小细节：
		当指定绝对路径时，定义目录分隔符有两种方式：
		1，反斜线 但是一定要写两个。\\  new FileWriter("c:\\demo.txt");
		2，斜线  /  写一个即可。	new FileWriter("c:/demo.txt");


	
	--------------------------

	2,读取一个已有的文本文件将文本数据打印出来。
		
	class Demo
	{
		public static void main(String[] args)throws IOException
		{
			FileReader fr = new FileReader("demo.txt");

			int ch = 0;
			//一次读一个字符。
			while((ch=fr.read())!=-1)
			{
				System.out.print((char)ch);
			}

			fr.close();

		}
	}
	

	class Demo
	{
		public static void main(String[] args)
		{
			FileReader fr = null;
			try
			{
				new FileReader("demo.txt");

				char[] buf = new char[1024];//该长度通常都是1024的整数倍。

				int len = 0;

				while((len=fr.read(buf))!=-1)
				{
					System.out.println(new String(buf,0,len));
				}

			}
			catch(IOException e)
			{
				System.out.println(e.toString());
			}
			finally
			{
				if(fr!=null)
					try
					{
						fr.close();
					}
					catch(IOException e)
					{
						System.out.println("close:"+e.toString());
					}
			}
			

		}
	}

