
在程序中，对于现阶段编程，其实就是new对象并使用对象的方法。
没有相对应的对象，这时就需要自己描述一个对象。

对象的好处，就是可以将属性和行为进行封装。

面向对象有三个特征：
封装，继承，多态。

封装：隐藏实现细节。
	在程序中体现方式之一就是将成员变量私有化，通过对应的set，get方法来访问。
	class Person
	{
		private int age;
		public void setAge(int age)
		{
			this.age = age;
		}
		public int getAge()
		{
			return age;
		}
	}

	private 是一个权限修饰符，可以修饰成员（成员变量，成员函数）。
	private 只在本类中有效。

	其实函数就是一个最小的封装体。
	类也是一种封装形式。
	框架也是封装形式。

	封装增强了安全性。
	您调用我的专业编程方法，来完成项目，至于我是怎么编的不重要，而且您的时间很宝贵，
	也没有时间看编写过程，这个过程对于您就是隐藏的。
	您只要知道结果就可以了。使用我的方法，最好的地方就是我可以将让您满意的结果给你。

	
-------------------------------------------

	构造函数：
	1，函数名和类名相同。
	2，没有返回值类型。
	3，函数中不可以写return语句。

	作用：用于给对象进行初始化。
	运行特点：对象一建立，就会调用与之对应的构造函数，但是只调用一次。
	对于类中的一般方法，是可以被同一个对象调用多次。

	注意：只要是用class定义的类中，都会有一个默认的空参数构造函数。
	当在类中自定义了构造函数后，默认的构造函数就消失了。

	什么时候用？
	在描述事物时，该事物一出现就具备了一些属性和行为，那么这些内容就需要定义在构造函数中。

	构造函数多个时，在类中是重载的形式体现的。

	构造函数间的调用.是为初始化动作别重用。
	只能通过this语句的形式完成。而且该语句只能放在第一行。

	class Person
	{
		private String name;
		private int age;
		Person(String name)
		{
			this(name,0);
		}
		Person(String name,int age)
		{
			this.name = name;
			this.age = age;
		}
		public void show()
		{
			//new Person("hah",40);

		}
	}

-------------------------------------------------
	this关键字：
	代表本类对象的引用。
	代表哪一个对象呢？
	代表的是哪个对象调用了this所在函数，this就代表哪个对象。
	
	什么时候用this关键字？
	定义类中的功能(函数)时，如果该功能函数的内部又用到了调用该功能的本类对象。这是就用this来表示。

	作用：
	1，可以用于区分成员变量和局部变量同名的情况。
	2，用于构造函数间调用。







	




	













