函数：
	它是一个独立的功能。
	定义在类中。
	需要被调用才会执行。

	定义格式：
	修饰符  返回值类型  函数名称(参数类型 形式参数1，。。。)
	{
		执行语句；
		return 返回值；
	}

	如何定义一个函数？
	1，明确该功能运行后的结果。其实就是在明确函数的返回值类型。
	2，明确在实现该功能的过程中，是否有未知内容参与运算。其实就是在明确参数列表。

	特殊情况：
	该功能运行后，没有具体结果返回，这是通过void关键字来表示返回值类型。
	函数内部一样有return语句。return; 但是可以省略不写。

	示例：
	需求：通过分数获取对应的等级'A'.

	/*
	用于演示多个功能。
	*/
	class Demo
	{
		/*
		通过分数获取对应的等级'A'.
		思路：
		*/
		public static char getLevel(int num)
		{
			return 'a';
		}

		public static void main(String[] args)
		{
			char ch = getLevel(59);
			System.out.println(ch);
		}
	}

	函数的特性：重载：overload。

	定义：在一个类中，可以允许存在多个同名函数，只要它们的参数个数或者参数类型不同即可。
	重载和返回值类型没关系。

	重载的应用：
	在定义函数时，这些函数的功能是一致的，只是参数不同。这时可以将函数定义成重载形式，也就是函数名都相同。
	增强阅读性以及调用方便。


	注意写法：
	函数中不可以定义函数，函数中只可以调用函数。
	
	
----------------------------------------------

数组：
	其实就是一堆相同数据类型的数据的集合。
	数组中存放的元素的个数有固定长度的。

特点：可以对其中元素进行编号，从0开始。

	其实数组就相当于一个容器。可以存放数据。并方便操作这些数据。

	什么时候用数组？当数据多的时候，就要先想要将这些数据进行存储。


	格式：
		1)int[] arr = new int[3];
		2)int[] arr = {3,1,4,7};

	数组的操作：
	1，可以通过length属性获取数组的长度。
	2，遍历。通常看到数组先想要遍历。
		原理：其实就是让角标不断的变化。
		int x = 0;
		System.out.println(arr[x]);
		x++;
		System.out.println(arr[x]);
		
		int x = 0;
		while(x<arr.length)
		{
			System.out.println(arr[x]);
			x++;
		}
			
		for(int x=0; x<arr.length; x++)
		{
			System.out.println(arr[x]);
		}
		//倒着遍历。
		for(int x=arr.length-1; x>=0; x--)
		{
			System.out.println(arr[x]);		
		}
	3，获取最值。
		a，获取最大值。
		思路：
			1，获取最大值，其实就是让元素不断的比较。需要将每一次较大的元素临时记录下来。
				这时就需定义一个变量记录该值。
				该变量如何初始化呢？int max = 0;
			2，通过循环的形式，自动让这些元素进行比较。
			3，在循环过程中定义条件。如果遍历到的元素比max还要大，就用max记录该值。
		public static int getMax(int[] arr)
		{
			int max = 0;//初始化的是数组中任意一个角标。
			for(int x=1; x<arr.length; x++)
			{
				if(arr[x]>arr[max])
					max = x;
			}
			return arr[max];
		}

	4，排序。
		1)选择排序。
			特点：先确定一个位置，不断通过这个位置上的元素和其他元素进行比较。
				如果满足条件，元素进行换位，还是以该位置元素进行比较。
				内循环结束一次，在0角标位出现最值。
			public static void selectSort(int[] arr)
			{
				for(int x=0; x<arr.length-1; x++)
				{
					for(int y=x+1; y<arr.length; y++)
					{
						if(arr[x]>arr[y])
						{
							int temp = arr[x];
							arr[x] = arr[y];
							arr[y] = temp;
						}
					}
				}
			}
		2)冒泡排序。
			特点：是相邻两个元素进行比较。内循环结束一次，最尾角标位出现最值。
			public static void bubbleSort(int[] arr)
			{
				for(int x=0; x<arr.length-1; x++)//for(int x=arr.length-1; x>=0; x--)
				{
					for(int y=0; y<arr.length-x-1; y++)//for(int y=0; y<x; y++)
					{
						if(arr[y]>arr[y+1])
						{
							int temp = arr[y];
							arr[y] = arr[y+1];
							arr[y+1] = temp;
						}
					
					}
				}
			}
		
	5，查找。
		public static int getIndex(int[] arr,int key)
		{
			for(int x=0; x<arr.length; x++)
			{
				if(arr[x]==key)
				return x;
			}
			return -1;
		}

		可以提高效率，但是有前提：必须是有序数组。
		这就是传说中折半。也叫二分查找法。
		思路：
		1，其实通过获取中间角标上的元素和指定key进行比较。
			如果没有相等，至少可以减少一般需要比较的元素。
		2，在剩下的一般中，进行继续中间角标的比较。
			直到相等为止。如果要找元素在数组中不存在。返回-1。

		代码步骤：
		1，因为头角标和尾角标不断变化，以及中间角标也变化。
			所以定义三个变量。min，max，mid。
		2，因为要不断的进行折半，所以需要循环。
		3，在循环中，需要进行判断，通过判断的结果，改变头角标或者尾角标。
			头角标在不断的增加，尾角标在不断减小。
		4，当头角标大于了尾角标时，返回-1。否则返回中间角标mid。

		public static int halfSearch(int[] arr,int key)
		{

			int min,max,mid;
			min = 0;
			max = arr.length-1;

			while(min<=max)
			{
				mid = (max+min)/2;
				if(key>arr[mid])
					min = mid + 1;
				else(key<arr[mid])
					max = mid - 1;
				else
					return mid;
			}
			return -1;
		}

	
	6，将数组变成字符串输出。
		public static void daYin(int[] arr)
		{
			for(int x=0; x<arr.length; x++)
			{
				if(x!=arr.length-1)
					System.out.print(arr[x]+",");
				else
					System.out.println(arr[x]);
			}
		}



	class ArrayDemo
	{
		public static void main(String[] args)
		{
			int[] arr = {3,1,6,4,7,1};//3,1,6
			daYin(arr);
			selectSort(arr);//将原数组变成了有序的数组。
			daYin(arr);
		}
	}


	-------------------------------------------------------

	数组中常见的问题：
	1，数组角标越界异常。ArrayIndexOutOfBoundsException.
		当访问到数组中不存在的角标时。
	2，空指针异常:NullPointerException.引用型变量常见的异常。
		当引用型变量，值为null时，还在操作实体。

	-------------------------------------------------------

	数组在内存中的分配情况：
	1，栈内存：
		存放是局部变量。变量使用结束，会自动释放。
	2，堆内存：
		存放是数组和对象，也就是实体。
		a，堆内存中的实体都有起始内存地址值来对该实体进行标识。
		b，堆内存中的变量，都有默认初始化值。
		c，垃圾回收机制。当堆内存中的实体不在被任何引用所使用时，就被视为垃圾，
			在不定时时间内会垃圾回收。这是java很优秀的一个内存管理机制。

	-------------------------------------------------------


java基础：java语法基础，面向对象（封装，继承，多态），多线程，集合，IO，GUI，Socket。
javascript：html，css，js， dom。
	
javase。
	java基础，java标准版。
javaee。
	java企业版。
javame。
	java电子消费类产品。



