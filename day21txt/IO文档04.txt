File类：
	该类的出现是对文件系统的中的文件以及文件夹进行对象的封装。

	可以通过对象的思想来操作文件以及文件夹。


	1，构造函数：
		File(String filename):将一个字符串路径(相对或者绝对)封装成File对象，该路径是可存在的，也也可以是不存在。
		File(String parent,String child);
		File(File parent,String child);

	2，特别的字段：separator:跨平台的目录分隔符。
		例子：File file = new File("c:"+File.separator+"abc"+File.separator+"a.txt");

	3，常见方法：
		1，创建：
			boolean createNewFile()throws IOException:创建文件，如果被创建的文件已经存在，则不创建。
			boolean mkdir(): 创建文件夹。
			boolean mkdirs(): 创建多级文件夹。
		2，删除：
			boolean delete():可用于删除文件或者文件夹。
					注意：对于文件夹只能删除不带内容的空文件夹，
						对于带有内容的文件夹，不可以直接删除，必须要从里往外删除。
			void deleteOnExit(): 删除动作交给系统完成。无论是否反生异常，系统在退出时执行删除动作。


		3，判断：
			boolean canExecute():
			boolean canWrite():
			boolean canRead();

			boolean exists()：判断文件或者文件夹是否存在。
			boolean isFile(): 判断File对象中封装的是否是文件。
			boolean isDirectory():判断File对象中封装的是否是文件夹。
			boolean isHidden():判断文件或者文件夹是否隐藏。在获取硬盘文件或者文件夹时，
					对于系统目录中的文件，java是无法访问的，所以在遍历，可以避免遍历隐藏文件。


		4，获取：
			getName():获取文件或者文件夹的名称。
			getPath():File对象中封装的路径是什么，获取的就是什么。
			getAbsolutePath():无论File对象中封装的路径是什么，获取的都是绝对路径。
			getParent(): 获取File对象封装文件或者文件夹的父目录。
					注意：如果封装的是相对路径，那么返回的是null.
			long length():获取文件大小。
			long lastModified()：获取文件或者文件最后一次修改的时间。


			------------

			static File[] listRoots():获取的是被系统中有效的盘符。
			String[] list():获取指定目录下当前的文件以及文件夹名称。
			String[] list(Filenamefilter): 可以根据指定的过滤器，过滤后的文件及文件夹名称。
			File[] listFiles():获取指定目录下的文件以及文件夹对象。

		5，重命名：
			renameTo(File):
				File f1 = new File("c:\\a.txt");
				File f2 = new File("c:\\b.txt");
				f1.renameTo(f2);//将c盘下的a.txt文件改名为b.txt文件。

-------------------------------------------------------------

递归：
	其实就是在使用一个功能过程中，又对该功能有需求。
	就出现了函数自身调用自身。

	注意：
	1，一定要限定条件，否则内存溢出。
	2，使用递归时，调用次数不要过多，否则也会出现内存溢出。

	需求：
		想要列出指定目录下的文件以及文件夹中的文件(子文件)。


		//列出指定目录下的当前的文件或者文件夹。
		//想要列出当前目录下的文件夹中的文件，其实就是在重新使用该功能 。
		public void listDir(File dir,int level)
		{
			System.out.println(getLevel(level)+dir.getName());
			level++;
			File[] files = dir.listFiles();
			for(int x =0; x<files.length; x++)
			{
				if(files[x].isDirecotry())//如果遍历到的是目录。
					listDir(files[x],level);//那么就行该功能的重复使用。递归。
				else
					System.out.println(getLevel(level)+files[x].getName());
			}
		}

		//想要对列出的目录有一些层次关系。
		public String getLevel(int level)
		{
			StringBuilder sb = new StringBuilder();
			sb.append("|--");
			for(int x=0; x<level; x++)
			{
				sb.insert(0,"|  ");
			}
			return sb.toString();
		}



	2，需求：删除一个带内容的目录。
		原理：从里往外删除，所以需要使用递归完成。
		public void deleteAll(File dir)
		{
			File[] files = dir.listFiles();
			for(int x=0; x<files.length; x++)
			{
				if(files[x].isDirectory())
					deleteAll(files[x]);
				else
					files[x].delete();
			}
			dir.delete();

		}
------------------------------------------------------

	IO包中的常见对象。
	字节流：
		FileInputStream
		FileOutputStream
		BufferedInputStream
		BufferedOutputStream

	字符流:
		FileReader
		FileWriter
		BufferedReader
		BufferedWriter
	     转换流:
		InputStreamReader
		OutputStreamWriter

	文件对象:
		File

	打印流：
		PrintStream
		PrintWriter

	所有的带File的流对象都可以直接操作File对象。





















		

			


